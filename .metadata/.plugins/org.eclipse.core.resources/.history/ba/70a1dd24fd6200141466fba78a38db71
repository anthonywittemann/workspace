package aw;

import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.Random;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;




public class Lab10Client extends JFrame implements Runnable{

	private PrintWriter pw;
	private BufferedReader br;
	private Socket socket;
	
	private JLabel myHealthLbl;
	private JLabel otherHealthLbl;
	private JButton swordB;
	private JButton magicB;
	
	protected short myHealth;
	protected short otherHealth;
	
	public Lab10Client(String hostname, int port, String title){
		super("FF7" + title);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setSize(200,200);
		setLayout(new GridBagLayout());
		
		/*** Initialize components *** Initialize components ***  Initialize components *** Initialize components ***/
		myHealthLbl = new JLabel("10/10 Health");
		otherHealthLbl = new JLabel("Waiting for other player");
		swordB = new JButton("Sword");
		swordB.setEnabled(false);
		magicB = new JButton("Magic");
		magicB.setEnabled(false);
		
		
		
		swordB.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent ae) {
				// decrement other players health
				//update JLabel
				//wait 3 seconds until either button can be used again
				
				swordB.setEnabled(false);
				magicB.setEnabled(false);
				revalidate();
				repaint();
				try {
		            int damage = 2;
		            
		            otherHealth -= damage;
		            otherHealthLbl.setText(otherHealth + "/10 Health");
		            pw.println(damage);
		            if (otherHealth <= 0) {
		                JOptionPane.showMessageDialog(null, "You won !", "Game over", JOptionPane.INFORMATION_MESSAGE);
		                return;
		            }
		            Thread.currentThread().sleep(3000);
		            magicB.setEnabled(true);
		            swordB.setEnabled(true);

		        } catch (Exception e) {
		            System.out.println(e.getMessage());
		        }
			}
			
		});
		
		magicB.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent ae) {
				// TODO decrement other players health
				//update JLabel
				//wait 3 seconds until either button can be used again
				
				swordB.setEnabled(false);
				magicB.setEnabled(false);
				revalidate();
				repaint();
				try {
		            int damage = 0;
		            Random r = new Random();
		            damage = r.nextInt(5) + 1;
		            
		            otherHealth -= damage;
		            otherHealthLbl.setText(otherHealth + "/10 Health");
		            pw.println(damage);
		            if (otherHealth <= 0) {
		                JOptionPane.showMessageDialog(null, "You won !", "Game over", JOptionPane.INFORMATION_MESSAGE);
		                return;
		            }
		            Thread.currentThread().sleep(3000);
		            magicB.setEnabled(true);
		            swordB.setEnabled(true);

		        } catch (Exception e) {
		            System.out.println(e.getMessage());
		        }
			}
			
		});
		
		
		
		/*** adding components to GUI *** adding components to GUI *** adding components to GUI *** adding components to GUI ***/
		GridBagConstraints gbc = new GridBagConstraints();
		gbc.gridy = 0; gbc.ipady = 10;
		add(myHealthLbl, gbc);
		gbc.gridy = 1;
		add(otherHealthLbl, gbc);
		gbc.gridy = 2;
		add(swordB, gbc);
		gbc.gridy = 3;
		add(magicB, gbc);
		
		
		pack();
		setVisible(true);
		
		
		try {
			Socket s = new Socket(hostname, port);
			this.pw = new PrintWriter(s.getOutputStream());
			this.br = new BufferedReader(new InputStreamReader(s.getInputStream()));
			String answer = this.br.readLine();
			System.out.println(answer);
//			while(true){
//				String line = scan.nextLine(); //TODO get this input from button and then pass it on to server
//				pw.println(line);
//				pw.flush(); //FLUSH!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//			}
			
		} catch (UnknownHostException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		
	}
	
	public void run(){
		try {
			while(true){
				//TODO modify to listen to buttons
				String line = br.readLine();
				System.out.println(line);
			}
		} catch (IOException ioe) {
			System.out.println("IOException in ChatClient run method: " + ioe.getMessage());
		}
	}



}
