package aw;

import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Scanner;
import java.util.Vector;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;




public class Lab10Server extends JFrame{
	//VECTOR WHEN MULTITHREADING, ARRAYLIST WHEN SINGLE THREAD
	private Vector<AttackThread> atVector = new Vector<AttackThread>();
	//TODO remove clients from vector when disconnected
	
	//TODO should only be 2 clients at once
	
	private JLabel p1HealthLbl;
	private JLabel p2HealthLbl;
	private JButton swordB;
	private JButton magicB;
	
	
	public Lab10Server(int port){
		super("FF7");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setSize(200,200);
		setLayout(new GridBagLayout());
		
		/*** Initialize components *** Initialize components ***  Initialize components *** Initialize components ***/
		p1HealthLbl = new JLabel("10/10 Health");
		p2HealthLbl = new JLabel("Waiting for other player");
		swordB = new JButton("Sword");
		swordB.setEnabled(false);
		magicB = new JButton("Magic");
		magicB.setEnabled(false);
		
		
		
		swordB.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO decrement other players health
				
			}
			
		});
		
		magicB.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO decrement other players health
				
			}
			
		});
		
		
		
		/*** adding components to GUI *** adding components to GUI *** adding components to GUI *** adding components to GUI ***/
		GridBagConstraints gbc = new GridBagConstraints();
		gbc.gridy = 0; gbc.ipady = 10;
		add(p1HealthLbl, gbc);
		gbc.gridy = 1;
		add(p2HealthLbl, gbc);
		gbc.gridy = 2;
		add(swordB, gbc);
		gbc.gridy = 3;
		add(magicB, gbc);
		
		
		pack();
		setVisible(true);
		
		
		/*** DO SERVER STUFF *** DO SERVER STUFF *** DO SERVER STUFF *** DO SERVER STUFF *** DO SERVER STUFF *** DO SERVER STUFF ***/ 
		try {
			ServerSocket ss = new ServerSocket(port);
			while(true){
				Socket s = ss.accept();
				AttackThread at = new AttackThread(s, this);
				atVector.add(at);
				at.start();
			}
			
		} catch (IOException ioe) {
			System.out.println("IOE: " + ioe.getMessage());
		}
	}

	//sends message out to all other clients, should only need to send to one other client
	public void sendMessage(String message, AttackThread at){
		for(AttackThread a: atVector){
			if(!a.equals(at)){
				a.attack(at.isSword());
			}
		}
	}
	
	
	public static void main(String[] args){
		int port = 6789;//port should be above 1023 for non Admin/root
		new Lab10Server(port);
	}

}
