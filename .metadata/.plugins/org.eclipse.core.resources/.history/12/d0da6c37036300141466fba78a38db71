import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.Random;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;


public class Client extends JFrame implements ActionListener, Runnable {
	private int myHealth = 10;
	private JLabel myHealthLbl = new JLabel(myHealth + "/10 Health");
	private int othermyHealth = 10;
	private JButton swordB = new JButton("Sword");
	private JButton magicB = new JButton("Magic");
	private JLabel otherHealthLbl = new JLabel("Waiting for other player.");
	private Socket socket;
	private BufferedReader br;
	private PrintWriter pw;
	private int id;
	
	Client(String title) {
		super(title);
		swordB.setActionCommand("sword");
		magicB.setActionCommand("magic");
		swordB.addActionListener(this);
		magicB.addActionListener(this);
        magicB.setEnabled(false);
        swordB.setEnabled(false);
		this.add(myHealthLbl);
		this.add(otherHealthLbl);
		this.add(swordB);
		this.add(magicB);
		this.setVisible(true);
		this.setLayout(new GridLayout(4, 1));
		this.setSize(500, 500);
		this.setDefaultCloseOperation(EXIT_ON_CLOSE);
	}

	@Override
	public void actionPerformed(ActionEvent ae) {
        magicB.setEnabled(false);
        swordB.setEnabled(false);
        this.repaint();
        try {
            int d = 0;
            if (ae.getActionCommand().equals("sword")) {
                d = 2;
            }
            else if (ae.getActionCommand().equals("magic")) {
                Random r = new Random();
                d = r.nextInt(5) + 1;
            }
            else {
                return;
            }
            this.othermyHealth -= d;
            this.otherHealthLbl.setText(this.othermyHealth + "/10 Health");
            pw.println(d);
            if (this.othermyHealth <= 0) {
                JOptionPane.showMessageDialog(null, "You won !", "Game over", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            Thread.currentThread().sleep(3000);
            magicB.setEnabled(true);
            swordB.setEnabled(true);

        } catch (InterruptedException ie) {
			ie.printStackTrace();
		}
	}

	@Override
	public void run() {
        try{
            socket = new Socket("localhost", 4444);
            br = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            pw = new PrintWriter(socket.getOutputStream(), true);
            while(this.myHealth > 0) {
                String attack = br.readLine();
                int d = Integer.parseInt(attack);
                if (d != -1) {
                    this.myHealth = this.myHealth - d;
                    if (this.myHealth <= 0) {
                        magicB.setEnabled(false);
                        swordB.setEnabled(false);
                       JOptionPane.showMessageDialog(null, "You lost !", "Game over", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
                this.otherHealthLbl.setText(this.othermyHealth + "/10 Health");
                this.myHealthLbl.setText(this.myHealth + "/10 Health");
                //when the method is originally called
                if (d == -1) {
                    Thread.currentThread().sleep(3000);
                    magicB.setEnabled(true);
                    swordB.setEnabled(true);
                }
            }
        }
        catch(Exception e) {
            System.out.print(e.getMessage());
        }
	}
}
