package aw;

public abstract class ParentAI {
	
	//TODO needs to know current location, type of tile it's currently on, current direction
	
	protected short currentDirection; //can be 1: North, 2: East, 3: South, 4: West
	protected int currentX;
	protected char currentY;
	protected int previousX;
	protected char previousY;
	
	protected boolean canMoveNorth;
	protected boolean canMoveEast;
	protected boolean canMoveSouth;
	protected boolean canMoveWest;
	
	//can be 1: blank, 2: I, 3: L, 4: T, 5: +, 0 if tile would be off grid
	protected short currentTile; //should never be 1 or 0 b/c roadways will always be valid
	protected int tileRotation;
	
	
	public ParentAI(int currentX, char currentY, short currentTile, int tileRotation){
		this.currentX = currentX;
		this.currentY = currentY;
		this.currentTile = currentTile;
		this.tileRotation = tileRotation;
		
		findValidMoveDirections();
	}
	
	private void findValidMoveDirections(){
		//based on the current tile, check to see which moves are valid
		if(currentTile == 2 && (tileRotation == 0 || tileRotation == 180)){ // in vertical I configuration
			canMoveNorth = true; canMoveSouth = true;
			canMoveEast = false; canMoveWest = false;
		}
		else if(currentTile == 2 && (tileRotation == 90 || tileRotation == 270)){ // in horizontal I configuration
			canMoveNorth = false; canMoveSouth = false;
			canMoveEast = true; canMoveWest = true;
		}
		
		
		else if(currentTile == 3 && tileRotation == 0){ // L rotated 0 degrees
			canMoveNorth = true; canMoveSouth = false;
			canMoveEast = true; canMoveWest = false;
		}
		else if(currentTile == 3 && tileRotation == 90){ // L rotated 90 degrees
			canMoveNorth = true; canMoveSouth = false;
			canMoveEast = false; canMoveWest = true;
		}
		else if(currentTile == 3 && tileRotation == 180){ // L rotated 180 degrees
			canMoveNorth = false; canMoveSouth = true;
			canMoveEast = false; canMoveWest = true;
		}
		else if(currentTile == 3 && tileRotation == 270){ // L rotated 270 degrees
			canMoveNorth = false; canMoveSouth = true;
			canMoveEast = true; canMoveWest = false;
		}
		
		
		else if(currentTile == 4 && tileRotation == 0){ // T rotated 0 degrees
			canMoveNorth = false; canMoveSouth = true;
			canMoveEast = true; canMoveWest = true;
		}
		else if(currentTile == 4 && tileRotation == 90){ // T rotated 90 degrees
			canMoveNorth = true; canMoveSouth = true;
			canMoveEast = false; canMoveWest = true;
		}
		else if(currentTile == 4 && tileRotation == 180){ // T rotated 180 degrees
			canMoveNorth = true; canMoveSouth = false;
			canMoveEast = true; canMoveWest = true;
		}
		else if(currentTile == 4 && tileRotation == 270){ // T rotated 270 degrees
			canMoveNorth = true; canMoveSouth = true;
			canMoveEast = false; canMoveWest = true;
		}
		
		
		else{ //in plus tile
			canMoveNorth = true; canMoveSouth = true;
			canMoveEast = true; canMoveWest = true;
		}
		
	}
	
	public abstract void move();
	
	
}
