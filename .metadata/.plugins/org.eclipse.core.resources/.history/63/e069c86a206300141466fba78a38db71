package aw;

import Server;

import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Vector;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;

import Server.Listener;




public class Lab10Server extends Thread{
	 private int count = 0;
	    private ListenThread[] connections = new ListenThread[2];
	    private int port;
	    
	    public Lab10Server(int port){
	    	this.port = port;
	    }
	    
		/*** DO SERVER STUFF *** DO SERVER STUFF *** DO SERVER STUFF *** DO SERVER STUFF *** DO SERVER STUFF *** DO SERVER STUFF ***/ 
	    public void run() {
	        ServerSocket serverSocket = null;
	        Socket socket = null;

	        try {
	            serverSocket = new ServerSocket(port);
	            while (count < 2) {
	                socket = serverSocket.accept();
	                connections[count] = new Listener(socket, count);
	                connections[count].start();
	                count++;
	            }
	            for (ListenThread lt: connections) {
	                lt.pw.println(-99);
	                lt.pw.flush();
	            }
	        } catch (IOException e) {
	            System.err.println("Could not listen on port: " + port);
	            System.exit(1);
	        }
	    }

	    

	    private class ListenThread extends Thread {
	        public PrintWriter pw;
	        public BufferedReader br;
	        public Socket socket;
	        public int id;
	        ListenThread(Socket socket, int id) {
	            this.socket = socket;
	            this.id = id;
	            try {
	                pw = new PrintWriter(socket.getOutputStream(), true);
	                pw.flush();
	                br = new BufferedReader(new InputStreamReader(socket.getInputStream()));
	            } catch (IOException ioe) {
	                ioe.printStackTrace();
	            }
	        }

	        @Override
	        public void run() {
	            System.out.println("Created listener thread.");
	            try {
	                while (true) {
	                    String damageMessage = br.readLine(); //blocking line (waits until it receives input, makes sure there's no infinite loop, stackoverflow
	                    System.out.println("Damage: " + damageMessage);
	                    int damage = Integer.parseInt(damageMessage);
	                    connections[1 - id].pw.println(damage);
	                    connections[1 - id].pw.flush();
	                }
	            } catch (IOException ioe) {
	                ioe.printStackTrace();
	            }
	        }
	    }

	    
	    public static void main (String [] args) {
	    	int port = 9876;//port should be above 1023 for non Admin/root
	        Lab10Server server = new Lab10Server(port);
	        server.start();
	    }
	
	
	/*** DO SERVER STUFF *** DO SERVER STUFF *** DO SERVER STUFF *** DO SERVER STUFF *** DO SERVER STUFF *** DO SERVER STUFF ***/ 
//	public void run(){
//		ServerSocket ss = null;
//		Socket s = null;
//		try {
//			ss = new ServerSocket(port);
//			
//			while(!bothConnected){
//				if(listenerVector.size() < 2){
//					s = ss.accept();
//					ListenThread at = new ListenThread(s, (short) listenerVector.size());
//					at.start();
//					listenerVector.add(at);
//					
//					if(listenerVector.size() == 2){
//						//Don't let any more connect
//						bothConnected = true;
//						System.out.println("Both Connected");
//						//TODO wait for 3 seconds
//					}
//					System.out.println("Connected" + listenerVector.size());
//				}
//			}
//			for(ListenThread a: listenerVector){
//				a.pw.println(-1);
//				a.pw.flush();
//			}
//			
//		} catch (IOException ioe) {
//			System.out.println("IOE: " + ioe.getMessage());
//		}
//	}
//	
//	
//	
//	
//	private class ListenThread extends Thread{
//		public Socket s;
//		public PrintWriter pw;
//		public BufferedReader br;
//		private short playerNum;
//		
//		ListenThread(Socket s, short pNum){
//			this.s = s;
//			this.playerNum = pNum;
//			try {
//				this.pw = new PrintWriter(this.s.getOutputStream(), true);
//				pw.flush();
//				br = new BufferedReader(new InputStreamReader(this.s.getInputStream()));
//			} catch (IOException ioe) {
//				System.out.println("IOE: " + ioe.getMessage());
//			}
//			
//		}
//		
//		
//		public void run(){
//			// a client has connected to our server
//			super.run();
//			
//			try {
//				while(true){
//					String line = br.readLine(); //blocking line (waits until it receives input, makes sure there's no infinite loop, stackoverflow
//					System.out.println("Server: " + line);
//                    int i = Integer.parseInt(line);
//                    listenerVector.get(playerNum - 1).pw.println(i);
//                    listenerVector.get(playerNum - 1).pw.flush();
//				}
//
//			} catch (IOException ioe) {
//				System.out.println("IOE: " + ioe.getMessage());
//				//thrown when client disconnected 
//			}
//		}
//	}
	


}
