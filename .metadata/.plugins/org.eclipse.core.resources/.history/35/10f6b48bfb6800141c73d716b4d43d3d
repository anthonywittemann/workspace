import java.util.concurrent.ForkJoinPool;


public class Fibonacci {
	private int n; //nth Fibonacci number

	public Fibonacci(int n){
		this.n = n;
	}
	
	
	public int compute(){
		if(n == 0 || n == 1){
			return n;
		}
		Fibonacci f1 = new Fibonacci(n-1);
		Fibonacci f2 = new Fibonacci(n-2);
		return f1.compute() + f2.compute();
	}
	
	
	public static void main(String[] args){
		int index = 30;
		int poolSize = Runtime.getRuntime().availableProcessors(); //returns number of cores in computer
		ForkJoinPool pool = new ForkJoinPool(2);
		System.out.println("Num cores: " + poolSize);
		long beforeTime = System.nanoTime();
		pool.invoke(new Fibonacci(index));
		
		
//		Fibonacci fib = new Fibonacci(index); nonparallel way of computing
//		fib.compute();
		
		long afterTime = System.nanoTime();
		System.out.println("time = " + (afterTime - beforeTime));
	}
	
}
