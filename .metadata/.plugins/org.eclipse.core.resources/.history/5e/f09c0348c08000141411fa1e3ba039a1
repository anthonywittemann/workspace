import java.util.*;
import java.util.concurrent.locks.*;

public class CookFactory {
	private static Vector<Order> ordersToCook;

	public CookFactory(CookPanel cp, int numCooks ) {
		ordersToCook = new Vector<Order>();

		for ( int i=0; i<numCooks; i++ ) {
			CookThread c = new CookThread( i, cp, this );
			c.start();
		}

	}
	
	public static void addOrder(Order nOrder){
		ordersToCook.add(nOrder);
	}
}


class CookThread extends Thread {
	private int cookNumber;
	private CookPanel cookPanel;
	private CookFactory cookFactory;
	
	public CookThread( int n, CookPanel cp, CookFactory cf ) {
		cookNumber = n;
		cookPanel = cp;
		cookFactory = cf;		
	}
	
	public void run() {
		cookPanel.addCookMessage( "Cook" + cookNumber + " is ready to cook." );
		
		
		//TODO 
	}
}

