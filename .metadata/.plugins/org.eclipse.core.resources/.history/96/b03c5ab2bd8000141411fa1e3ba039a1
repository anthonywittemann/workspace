import java.util.Vector;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class CustomerFactory extends Thread {

	private Vector<CustomerThread> customerThreadVector = new Vector<CustomerThread>();
	private Hostess hostessThread;
	
	public CustomerFactory(Hostess hostessThread) {
		this.hostessThread = hostessThread;;
		this.start();
	}
	
	public void run() {
		try {
			int customerNumber = 0;
			while (true) {
				CustomerThread ct = new CustomerThread(customerNumber++, hostessThread);
				customerThreadVector.add(ct);
				Thread.sleep(1000 * (int)(Math.random() * 5)); // customers come in between 0 and 5 seconds apart
			}
		} catch (InterruptedException ie) {
			System.out.println("CustomerFactory.run(): InterruptedException: " + ie.getMessage());
			for (CustomerThread ct : customerThreadVector) {
				ct.interrupt();
			}
		}
	}
}

class CustomerThread extends Thread {
	private int customerNumber;
	private Hostess hostessThread;
	private Table table;
	private Lock orderLock = new ReentrantLock();
	
	public CustomerThread(int customerNumber, Hostess hostessThread) {
		this.customerNumber = customerNumber;
		this.hostessThread = hostessThread;
		this.start();
	}
	
	public int getCustomerNumber() {
		return this.customerNumber;
	}
	
	public Table getTable() {
		return this.table;
	}
	
	public void run() {
		try {
			table = hostessThread.seatCustomer(this);
			//TODO wait for the waiter to arrive
			this.table.getWaiterThread().wait(); //gives up lock here
			
			orderLock.lock();
			try{
				int order = (int) (3 * Math.random()); //random order from 0-2
				//TODO pass value to waiter
				
			} finally{
				orderLock.unlock();
			}
			
			
			// TODO Print a message, to the regular message window after the Waiter has a Customer order.
			//The message is to say: “Waiter X has taken an order for Y from table Z.”.
			String message = "Waiter " + this.table.getWaiterThread().getWaiterNumber() + 
					" has taken an order for " + this.customerNumber + " from table " + 
					this.getTable().getTableNumber();
			
			
			Thread.sleep(1000 * (int)(Math.random() * 10)); // sleep for between 0 and 10 seconds
			if(hostessThread != null && this != null){
				hostessThread.customerLeaving(this);
			}
		} catch (InterruptedException ie) {
			System.out.println("CustomerThread.run(): InterruptedException: " + ie.getMessage());
		}
	}
}